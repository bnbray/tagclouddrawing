#!/usr/bin/perl

#ofk, 5 Sept 2006.  Output text ready for html nested tables via floorplanner

#lines beginning with characters that say how big they should be (0-9)
#first char not a digit--> same as size 0
#spaces are encoded as +, which are removed later

#example
#9shout
#2quietly talk
#hisper whisper 

open(INF,$ARGV[0]) || die "opening input $ARGV[0]";

# The existence of this file is old cruft, as its data is redundant (in csv file)

# read in the file
while(<INF>) {
    chomp;
    
    if (/^([0-9]{1,2})(.*)/) {
	$size[$ctr] = $1; $line[$ctr]=$2;
    }	
    else {
	$size[$ctr]=0; $line[$ctr]=$_;
    }
    
    #encode spaces as +
    $line[$ctr] =~ y/ /+/;
    #kill carriage returns, if any from a DOS file
    $line[$ctr] =~ s/\r//g;
    $ctr++;
}

#ARGV[1] is the csv file, whose order matches the .input file
# (but which may have comments)
open(CSV,$ARGV[1]) || die "opening csvfile";

# slurp in the .csv file, which should contain 3 different shapes per tag
# (first, all tags in normal aspect, then all tags in wide aspect, then 
# all tags in narrow aspect.  It's possible that all 3 won't be viable shapes.
#

$i=0;
while (1) {
# skip to a non-comment line
    while (<CSV>) {
        chomp;
        last unless /\s*#.*/;
    }
    # print "got a line to split, it is $_\n";
    @fields = split /,/;
    # if the tags had commas, the csv will be sick. compensate.
    # the 'right' solution is to quote, but this is harder to handle
    while (@fields > 4) { shift @fields;}

    # blank tag is sentinal
    last if $fields[0] =~ /\s+/;
    
    ($tg,$sz,$w,$h) = @fields;
    $norm_w[$i] = $w; $norm_h[$i] = $h;
    $i++;
}

#repeat, for the wider/shorter version
$i=0;
while (1) {
# skip to a non-comment line
    while (<CSV>) {
        chomp;
        last unless /\s*#.*/;
    }
    last if eof(CSV);
    @fields = split /,/;
    # if the tags had commas, the csv will be sick. compensate.
    # the 'right' solution is to quote, but this is harder to handle
    while (@fields > 4) { shift @fields;}

    # blank tag is sentinal
    last if $fields[0] =~ /\s+/;
    
    ($tg,$sz,$w,$h) = @fields;
    $wide_w[$i] = $w; $wide_h[$i] = $h;
    $i++;
}

print STDERR "not enough wide-alt data\n" if $i != $ctr;

#repeat, for the skinny/taller version
$i=0;
while (1) {
# skip to a non-comment line
    while (<CSV>) {
        chomp;
        last unless /\s*#.*/;
    }
    last if eof(CSV);
    @fields = split /,/;
    # if the tags had commas, the csv will be sick. compensate.
    # the 'right' solution is to quote, but this is harder to handle
    while (@fields > 4) { shift @fields;}

    # blank tag is sentinal
    last if $fields[0] =~ /\s+/;
    
    ($tg,$sz,$w,$h) = @fields;
    $narrow_w[$i] = $w; $narrow_h[$i] = $h;
    $i++;
}



print STDERR "not enough narrow-alt data, got $i expect $ctr\n" if $i != $ctr;

open(OUT,">temporary.pl");

print OUT "$ctr 0\n";  

for ($i=0; $i < $ctr; $i++) {



    my $nshapes = 0;
    # data file requires shape width sequence  monotone increasing
    #  and heights, monotone decreasing.
    # sizing code is going to assume that each module has 3 shapes, exactly
    # the legalizing process can cause problems by advertising fictional shapes!

    # w is the max width seen so far  
    # h is the least width

    $w = $narrow_w[$i]; $h = $narrow_h[$i];
    die "narrow shape required, module $i\n" if not defined $w;


#    print "narr $narrow_w[$i] $narrow_h[$i] norm $norm_w[$i] $norm_h[$i] wide $wide_w[$i] $wide_h[$i]\n";

    # fixups should be by claiming things are bigger than they really need to
    # be.

    if ($norm_w[$i] <= $w) {
        print STDERR "warning, legalizing norm width tag $line[$i]\n";
        $w++;
        $norm_w[$i] = $w;
    } else {$w = $norm_w[$i];}

    if ($norm_h[$i] >= $h) {
        print STDERR "warning, legalizing narrow height tag $line[$i]\n";
        $narrow_h[$i] = $norm_h[$i]+1;
    }  
    $h = $norm_h[$i];

    if ($wide_w[$i] <= $w) {
        print STDERR "warning, legalizing wide width tag $line[$i]\n";
        $w++;
        $wide_w[$i] = $w;
    } else {$w = $wide_w[$i];}

    if ($wide_h[$i] >= $h) {
        print STDERR "warning, legalizing normal height tag $line[$i]\n";
        $norm_h[$i] = $wide[$i]+1;
        # and this in turn may cascade to narrow_h
        if ($narrow_h[$i] <= $norm_h[$i]) { $narrow_h[$i] = $norm_h[$i]+1;}
    }
    $h = $wide_h[$i];

    $area = $norm_w[$i]*$norm_h[$i];

    $shapeline[$nshapes++] = "$narrow_w[$i] $narrow_h[$i]\n";
    $shapeline[$nshapes++] = "$norm_w[$i] $norm_h[$i]\n";
    $shapeline[$nshapes++] = "$wide_w[$i] $wide_h[$i]\n";

    print OUT "$i $area 0 0 $nshapes 0 ";
    print OUT $size[$i];
    print OUT $line[$i],"\n";
    foreach $shapel (@shapeline) {
        print OUT $shapel;
    }
}


if ($ARGV[2] eq "--noedges") {
    # another process will append the edges....
    close OUT;
    exit 0;
}



# what follows was only for earlier testing....

# complete graph with choose(N,2) edges

print OUT ($ctr-1)*$ctr/2,"\n";

# use lexicographic distance on first character as strength of pull

for ($i=0; $i < $ctr; $i++) {
    for ($j = $i+1; $j < $ctr; $j++) {
	$pull = int(1000 / (1+ abs(ord(reverse $line[$j]) - ord(reverse $line[$i]))));
	print OUT "$i $j $pull\n";
    }
}

# repeat using degree 2 hyperedges since I'm not sure whether
# current code uses the edges or hyperedges

# nb, this is obsolete as hyperedges no longer used.  This part of output
# would be ignored...

print OUT ($ctr-1)*$ctr/2,"\n";

$hctr=0;
for ($i=0; $i < $ctr; $i++) {
    for ($j = $i+1; $j < $ctr; $j++) {
	$pull = int( 1000 / (1+ abs(ord(reverse $line[$j]) - ord(reverse $line[$i]))));
	print OUT "$hctr mork $pull 2\n$i $j\n";
	$hctr++;
    }
}
close(OUT);
